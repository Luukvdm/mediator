// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mediator "github.com/luukvdm/mediator"
	mock "github.com/stretchr/testify/mock"
)

// MockBehavior is an autogenerated mock type for the Behavior type
type MockBehavior struct {
	mock.Mock
}

type MockBehavior_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBehavior) EXPECT() *MockBehavior_Expecter {
	return &MockBehavior_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function with given fields: next
func (_m *MockBehavior) Handler(next mediator.Handler) mediator.Handler {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 mediator.Handler
	if rf, ok := ret.Get(0).(func(mediator.Handler) mediator.Handler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mediator.Handler)
		}
	}

	return r0
}

// MockBehavior_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockBehavior_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
//   - next mediator.Handler
func (_e *MockBehavior_Expecter) Handler(next interface{}) *MockBehavior_Handler_Call {
	return &MockBehavior_Handler_Call{Call: _e.mock.On("Handler", next)}
}

func (_c *MockBehavior_Handler_Call) Run(run func(next mediator.Handler)) *MockBehavior_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mediator.Handler))
	})
	return _c
}

func (_c *MockBehavior_Handler_Call) Return(_a0 mediator.Handler) *MockBehavior_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBehavior_Handler_Call) RunAndReturn(run func(mediator.Handler) mediator.Handler) *MockBehavior_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBehavior creates a new instance of MockBehavior. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBehavior(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBehavior {
	mock := &MockBehavior{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
